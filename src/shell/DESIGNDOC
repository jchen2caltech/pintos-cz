			+------------------+
			|      CS 124      |
			| PROJECT 1: SHELL |
			|  DESIGN DOCUMENT |
			+------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jianchi Chen <jchen2@caltech.edu>
Taokun Zheng <tzheng@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  

0

>> What is the Git repository and commit hash for your submission?

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			   COMMAND SHELL
			   =============

---- DATA STRUCTURES ----

>> A1: Describe how your command shell manages parsing and executing
>> commands that contain arguments and pipes, using the example
>> command "a arg1 arg2 | b arg1 | c arg1 arg2 arg3".  How does your
>> shell internally represent such a command?

For each one-line string command input, our shell will first break
the command string (char*) into an array of tokens (char**), based on
separators such as whitespace and special characters like ("|", "<", ">"). 
Note anything inside a pair of double quotes is regarded as one single token. 
We defined the function "mysh_parse" to do this. So in this case we are 
breaking the example command into tokens of 
    "a", "arg1", "arg2", "|", "b", "arg1", "|", "c", "arg1", "arg2", "arg3".


We defined the follwoing structure:

    typedef struct _shellCommand
    {
        char *function;
        char **args;
        char *infile;
        char *outfile;

        int argc;
        int append;
    } shellCommand;

It is easy to see that inside each shellCommand struct, we have the function
name, the arguments, input/output file name ("NULL" if standard), 
argument numbers (argc), and the append flag for (>>) defaulted as 0.

Then function mysh_initcommand() will take the processed tokens, and initialize
shellCommand structs based on the tokens. Inside mysh_initicommand(), we will 
iterate through each token:

1) whenever we see "|"(or upon the first token), we will create a new shellCommand; 
2) the first token after the creation of a new shellcommand will be the 
    function name;
3) if we see ">":
    a) if the next token is ">", then the token after these two
        ">"'s will be set to outfile, and the append flag will be set;
    b) if the next token is not ">", then the token after the ">" will be set
        to outfile.
4) if we see "<":
    The token after "<" will be set to infile.
5) Note we also check to make sure there is some token exist after the special
    characters ("|", "<", and ">") - our shell shoots out SYNTAX_ERROR if no
    token exists afterwards.
We defined mysh_initcommand to accomplish all the above. Hence in our example
we will have a shellcommands array (tasks) of three shellcommands:
    tasks[0]: function = "a", 
            args is the array pointer of {"arg1", "arg2", NULL}
            in/out/errorfile are all NULL
            argc = 2
            append = 0
    tasks[1]: function = "b",
            args is the array  pointer of {"arg1", NULL}
            in/out/errorfile are all NULL
            argc = 1
            append = 0
    tasks[2]: function = "c",
            args is the array pointer of {"arg1", "arg2", "arg3", NULL}
            in/out/errorfile are all NULL
            argc = 3
            append = 0

Finally we pass the array pointer of the shellcommands (shellCommand **tasks),
to mysh_exec to execute each individual command tasks.


>> A2: Now, given the command:
>> "a arg1 arg2 < inp.txt | b arg1 | c arg1 arg2 arg3 > out.txt"
>> Briefly explain specifically how the redirections are parsed and
>> represented, and by what processes.

As explained above, when the mysh_initcommand() function encounters
'>' or '<', it will check for next token. If the token is a normal
token (not '|' or '>' or '<' or NULL), it will be added to the
shellCommand struct as the file path for input/output. 
shellCommand will be set up as follow:

    tasks[0]: function = "a"
              args = {arg1, arg2, NULL}
              infile = inp.txt
              outfile = NULL
              argc = 2
              append = 0
    tasks[1]: function = "b"
              args = {arg1, NULL}
              in/outfile = NULL
              append = 0
    tasks[2]: function = "c"
              args = {arg1, arg2, arg3, NULL}
              infile = NULL
              outfile = out.txt
              append = 0

---- ALGORITHMS ----

>> A3: Illustrate how you solved the problem of setting up
>> redirection in a simple command like "a < inp.txt > out.txt", by
>> describing what process takes care of the redirection and when.

The shell process will set up the function path, the args[] array, 
and then if the function indicates an external program, it will do
the following:

(1) fork a child
(2) wait for its execution

The child will set up the redirections. It will:

(1) If command->infile not NULL, it will open the indicated path
    with RDONLY set. It will then replace STDIN with the opened file
    descriptor using dup2(), and then close the opened file. 
(2) If command->outfile not NULL, it will open the indicated path
    with WRITE and CREATE flags set. It will then replace STDOUT with
    the opened file descriptor using dup2(), and then close the opened
    file. 

Note that open() failures will cause the function to return, and the
shell will output an error message, but the prompt will continue.

>> A4: Illustrate how you solved the problem of setting up the pipes
>> between multiple operations in a single command, by describing
>> what each process is responsible for.  For example, given the
>> command "a | b | c", describe the sequence of steps in setting up
>> the processes and their pipes, starting with your command shell's
>> process, and going through the execution of programs a, b and c.
>> Keep your description of each process' responsibilities limited to
>> ~25 words or less.

Using example "a | b | c":

Shell: check that there are tasks after <a>, so it calls pipe(currpipe),
       where currpipe is a int[2]. It will then fork(), close
       currpipe[1], and wait for <a> to terminate.

a:     It will see that there are tasks afterwards but no one before, 
       so it replace STDOUT with currpipe[1]. It will then close both
       ends of currpipe and execute the program. 

Shell: It will move currpipe into prevpipe. It then moves on to <b>, 
       and sees that there are task remaining, so it will pipe(currpipe)
       and then fork(), close currpipe[1], and wait for <b>. 

b:     It will see that there are tasks both before and after it. It will
       replace STDOUT with currpipe[1], and STDIN with prevpipe[0]. 
       It will then close all pipe ends and execute the program.

Shell: Close prevpipe ends, move currpipe into prevpipe. It then moves
       on to <c>, and sees that there are no task remaining. It will
       fork() and wait for <c>.

c:     It will see that there are tasks before but not after. It will
       replace STDIN with prevpipe[0] and close all pipe ends and 
       execute the program.

Shell: Close all pipe ends.

>> A5: Similarly, describe the details of how terminated processes are
>> reaped in the example command "a | b | c".

The shell process simply wait() on child that has just been created.

>> A6: Similarly, describe which processes are responsible for setting
>> up the redirections in the example command
>> "a < inp.txt | b | c > out.txt".

This is simply a mix of my answer to A3 and A4. The shell process will
be responsible for creating the pipes, but a, b and c will be
performing their redirections on their own. Namely, a will replace 
STDIN with inp.txt, STDOUT with currpipe[1]; b will replace STDIN
with prevpipe[0] and STDOUT with currpipe[1]; c will replace STDIN
prevpipe[0] and STDOUT with out.txt. 

---- RATIONALE ----

>> A?: Why do the chdir and exit commands have to be implemented as
>> built-in functions, rather than external programs?

Because "exit" and "cd" only make sense if they are executed by the
parent process. If there are executed in the same way as others, 
using external programs, the child process that is running the
command will "exit" or "cd", but this doesn't affect the shell
process. Therefore, they have to be implemented as built-in commands.

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Using two pipes saves memory if there are multiple tasks on
the pipeline, compared to the design that initializes a number of pipes
prior to all childs based on number of commands given. For
redirections, since it has to be performed inside the child process,
there is no other way of doing this. 

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

