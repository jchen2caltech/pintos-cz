                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

>> Specify how many late tokens you are using on this assignment:  

>> What is the Git repository and commit hash for your submission?

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No new struct is added, nor is any existing struct modified. 

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Begin iterating through the command string backwards from its tail. Push the
argument word onto the stack whenever a "space" is encountered, or when the
head of the string is encountered.
Then push the word-align and NULL onto the stack. 
Then starting from the PHYSICAL_BASE, iterate down the stack to push all
argument addresses onto the stack, until the word_align ('\0') is reached.
Then push the argument count onto the stack, as well as the fake return addr, 
which is really just NULL. 
We wrote a push4() function, which checks if the stack address after the push
will exceed the PG_SIZE limit from PHYSICAL_BASE, which prevents stack 
overflow.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is thread-safe, because the saveptr buffer is passed in from the
user, while strtok() uses a static buffer, which makes it not thread-safe.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The first advantage for using shell for the separation is that shell-
separation is safer and more time-efficient. Because the shell will
pre-check the validity of some commands, then it will filter out the
obviously wrongly inputed commands before they reach kernel directly,
hence reducing the time complexity in kernel and making the kernel
less exposed to illegal commands.

The second advantage of shell separation is by using shells we can
achieve more complex semantics, like pipeline, redirection.etc, without
burdening the kernel. However, if we want to achieve all these in Pintos,
kernel will then have a larger run-time for these operations, which is not
a really good design.

Thirdly, as looking for files and checking directories tend to be expensive,
which should be much better done by user-program instead of the kernel.
Given shell separation, the run-time of kernel is not very long, as the
shell these file commands. However, as in Pintos, everything is done in the 
kernel, and hence the run-time of the kernel will be much longer.


                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

enum thread_type {
    THREAD_KERNEL,
    THREAD_PROCESS,
};

struct thread {

#ifdef USERPROG
    /*! Owned by userprog/process.c. */
    /**@{*/
    uint32_t *pagedir;                  /*!< Page directory. */
    /**@{*/
    struct list child_returnstats;
    struct thread * parent;
    struct list f_lst;
    uint32_t f_count;
    uint32_t fd_max;
    enum thread_type type;
    struct thread_return_status *trs;
#endif

};

struct thread_return_status {
    pid_t pid;
    struct semaphore sem;
    int stat;
    struct list_elem elem;
};

struct f_info {
    /* The file object */
    struct file* f;
    /* The position of current access */
    off_t pos;
    /* List element for the list of all files of a process */
    struct list_elem elem;
    /* file descriptor */
    uint32_t fd;
    
};

This struct f_info is the element of file list (f_lst) for each process.
f_info->f is the file object; f_info->pos is the position or file offset
of file the process is current accessing; f_info-> elem, used to maintaining
the corresponding list; f_info-> fd is the file descriptor assigned to
this file.

The thread_type type is used for identifying whether a thread belongs to the
kernel or a user process, which decides whether an exit message will be
printed when exiting this thread.

The thread_return_status struct is used for storing return value of child
processes. It is both stored in the child process thread (as the "trs" field),
as well as in the parent process thread (pushed into "child_returnstats").

Multiple fields are added to the thread struct. In addition to ones explained
above, the f_count, f_lst and fd_max are used to keep track of files opened
by the thread.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

For each process, we have a list of f_info's, which is a structure
stores the each opening file, the corresponding fd, and the position
of the file the program now is accessing. Moreover, in our implementation,
in order to achieve minimum space and time complexity of maintaining
a list of f_info, for each process except from the list of f_info (f_lst), 
we keeps the number of elements in the f_lst (f_count) and the maximum
number of fd we have assigned (fd_max). Then each time when we want to
open a file, we check whether fd_max is less than 128, and then assign
fd_max + 1 to this newly opened file. (Of course, update everything 
accordingly after we have finished opening this file)

Therefore, in our implementation, file descriptor is unique inside a
single process, but not unique within the entire OS.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

For both read and write, our implementation do the following steps.

1) Check the buffer pointer (both its head and end) is inside the userprog 
stack and is mapped. In this way, we ensures the userprog to only access
the memory they are allowed to.



2) If fd is standard input or output, then either read with "input_getc"
each charater by charater to buffer, or write from the buffer to std output
with "putbuf."

3) If fd is not standard input or output, we first iterate through all
the f_info of the process's f_lst to find the f_info with the same fd.
If not found in the end, then exit(-1). 

4) If we find the corresponding f_info, then we first lock the entire
filesystem, to avoid simultaneous read or write to the same file.
Then we read or write to f_info->f (the file object of f_info) at the 
position of f_info->pos. Then we update the position f_info->pos by 
incrementing how much we read and write. Finally, we unlock the entire
filesystem and return the read_size or write_size.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

For our implementation, given a full page of data we will always have 
two inspections of the page table. Because for our implementation,
we will check both the head pointer and the end pointer (head + size) 
of data, with pagedir_get_page(). Similarly, for 2 bytes of data,
we all do the same thing, because we always check the validity of the
head and end address of given pointer and size.

Another better implementation will in fact require 0 pagedir_get_page()
calls. This approach will simply read and write the data until a page_fault
occurs, without checking the address. And this approach seems more time
efficient, as the approch will continue to read or write, until an illegal
address occurs.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

1). Based on the pid fed in, wait() will find the corresponding 
thread_return_status struct that belongs to the child process, since
they are all recorded in the parent process child_returnstats list. 

2). It then makes a sema_down() call on
the semaphore of the thread_return_status->sem.

3). Since the semaphore is initialized to be 0 and it is only 
incremented upon exiting of the child process, it is ensured that
the parent will only be signaled when the child process exits. 

4). When a child process is exiting, it signals the semaphore and
set the "stat" field in the thread_return_status struct to its
exit status. 

5). When the parent thread returns from the sema_down() call, it
will retrieve the "stat" field and destroy the thread_return_status
struct. 

6). When a parent thread exits, any non-retrieved return_status
struct will also be free'd before freeing the thread. 

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.



---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

This is again enabled by the thread_return_status struct. Note that
the semaphore contained in the struct is initialized to 0, so the
original thread that calls "exec" will sema_down on the semaphore, 
like in the "wait" syscall. 

The child thread being forked will sema_up() the semaphore and put
"success" or "fail" value in the struct as soon as the load is completed.
This will signal the parent thread to retrieve the status. 

It is different from "wait" in that in this case, the parent thread
WILL retrieve the status from the struct no matter what. Thus the
struct will be able to be reused for wait() and exit(). 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

There isn't any special case. 

1). P calls wait(C) before C exits:
P will wait on C->trs->sem. C will signal C->trs->sem just before
exiting. 

2). P calls wait(C) after C exits:
sema_down will return immediately, and P will be able to retrieve
the return status of C and destroy the struct. 

3). P terminates without waiting:
If it has any running child left, it will label all of them as
"orphan". Thus, when the childs are exiting, they will not signal
the semaphore and will destroy the thread_return_status struct
themselves.
If it doesn't have any running child left, but it has thread_return_status
that it hasn't retrieved or destroyed, it will free them all before exiting.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantage of our design for file descriptors is that for processes
accessing a small number of files, the space complexity for storing
these f_info is small, compared creating an array of 128 pointers.
And in most cases, as processes do not need as large as 128 files
opening at the same time, the advantage of space complexity in our
impelementation is obvious ( - as the memory usable by Pintos is scarce).
Moreover, when opening up a new file, we will just assign fd_max + 1 to
this file, which is also time-efficient. 

However, there are two disadvantages in this design. Firstly, for finding
the f_info with a given fd is not time-efficient, because we requires
iterate through the entire list of f_info and check each f_info->fd. 

Secondly, as our fd is uint32_t and for each file opening up, fd_max
increments (and it never decrements). Although this design efficiently
avoids fd-conflicts (i.e. assiging same fd to the same file), it does
causes troubles if a process opens up more than 2^32 files since its
creation. But as 2^32 is a really big number, this should be rarely
the case.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

